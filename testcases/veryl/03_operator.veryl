module Module03 {
    // unary arithmetic
    let _a : logic = +1;
    let _aa: logic = -1;

    // unary logical
    let _b : logic = !1;
    let _bb: logic = ~1;

    // unary reduce
    let _c     : logic = &1;
    let _cc    : logic = |1;
    let _ccc   : logic = ^1;
    let _cccc  : logic = ~&1;
    let _ccccc : logic = ~|1;
    let _cccccc: logic = ~^1;

    // binary arithmetic
    let _d     : logic = 1 ** 1;
    let _dd    : logic = 1 * 1;
    let _ddd   : logic = 1 / 1;
    let _dddd  : logic = 1 % 1;
    let _ddddd : logic = 1 + 1;
    let _dddddd: logic = 1 - 1;

    // binary shift
    let _e   : logic = 1 << 1;
    let _ee  : logic = 1 >> 1;
    let _eee : logic = 1 <<< 1;
    let _eeee: logic = 1 >>> 1;

    // binary compare
    let _f         : logic = 1 <: 1;
    let _ff        : logic = 1 <= 1;
    let _fff       : logic = 1 >: 1;
    let _ffff      : logic = 1 >= 1;
    let _fffff     : logic = 1 == 1;
    let _ffffff    : logic = 1 != 1;
    let _fffffffff : logic = 1 ==? 1;
    let _ffffffffff: logic = 1 !=? 1;

    // binary bitwise
    let _g    : logic = 1 & 1;
    let _gg   : logic = 1 ^ 1;
    let _ggg  : logic = 1 ~^ 1;
    let _ggggg: logic = 1 | 1;

    // binary logical
    let _h : logic = 1 && 1;
    let _hh: logic = 1 || 1;
}
